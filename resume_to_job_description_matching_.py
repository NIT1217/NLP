# -*- coding: utf-8 -*-
"""Resume-to-Job Description Matching .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kLdptP96QBLj8XJJ66BB6dAwmZQAVx7a

#Resume-to-Job Description Matching
Scenario:
 1. Youâ€™re building an AI-driven internship or job recommender (like your matchmaking engine).
Task:
  2. Use Doc2Vec or Sentence Embeddings to compute similarity between resumes and job descriptions, then rank jobs for each candidate.
  . Goal: Recommend the top 3 most relevant jobs for a user.
"""

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

job_descriptions = [
    "Looking for an AI intern with strong Python, NLP, and ML knowledge.",
    "Backend developer proficient in Java and database management systems.",
    "Graphic design intern familiar with Adobe tools and Figma."
]

resumes = [
    "Skilled in Python, machine learning, and data analysis. Worked on NLP projects using transformers.",
    "Experienced in Java, backend development, and database design with MySQL.",
    "Creative designer skilled in Photoshop, UI/UX, and Figma."
]

model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")

embeded_requirment = model.encode(job_descriptions)
embeded_resume = model.encode(resumes)

similarity_search = cosine_similarity(embeded_requirment , embeded_resume)

for i , resume in enumerate(resumes):
  print(f"candidate{i+1}")
  similarity_score = similarity_search[i]
  similarity_rank = np.argsort(-similarity_score)
  for rank, idx in enumerate(similarity_rank[:3]):
        print(f"   {rank+1}. {job_descriptions[idx]} (Score: {similarity_score[idx]:.2f})")